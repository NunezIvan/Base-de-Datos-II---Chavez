-- ============================================================================
-- UNIVERSIDAD NACIONAL MAYOR DE SAN MARCOS
-- Universidad del Perú. Decana de América
-- Facultad de Ingeniería de Sistemas e Informática
-- 
-- LABORATORIO 3 - Base de datos II
-- AUTOR: Nuñez Cárdenas Ivan Joaquin
-- DOCENTE: Jorge Luis Chávez Soto
-- CURSO: Base de datos II
-- FECHA: Lima, Perú 2025
-- ============================================================================

-- ============================================================================
-- 1. CREACIÓN DE TABLAS
-- ============================================================================

-- Tabla Horario
CREATE TABLE Horario (
    id_horario NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    dia_semana VARCHAR2(10) NOT NULL,
    turno VARCHAR2(20),
    hora_inicio TIMESTAMP DEFAULT TO_TIMESTAMP('08:00','HH24:MI'),
    hora_termino TIMESTAMP DEFAULT TO_TIMESTAMP('17:00','HH24:MI')
);

-- Tabla Empleado_Horario
CREATE TABLE Empleado_Horario (
    id_emphor NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    dia_semana VARCHAR2(10) NOT NULL,
    turno VARCHAR2(20),
    employee_id NUMBER NOT NULL,
    CONSTRAINT fk_emp_empHorario FOREIGN KEY (employee_id) 
        REFERENCES EMPLOYEES(EMPLOYEE_ID)
);

-- Tabla Asistencia_Empleado
CREATE TABLE Asistencia_Empleado (
    id_asistencia NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    employee_id NUMBER NOT NULL,
    dia_semana VARCHAR2(10) NOT NULL,
    fecha_real DATE NOT NULL,
    hora_inicio_real TIMESTAMP,
    hora_termino_real TIMESTAMP,
    inasistencia CHAR(1) DEFAULT 'N',
    CONSTRAINT fk_emp_asist FOREIGN KEY (employee_id) 
        REFERENCES EMPLOYEES(EMPLOYEE_ID)
);

-- Tabla Capacitacion
CREATE TABLE Capacitacion (
    id_capacitacion NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(200) NOT NULL,
    horas NUMBER(5,2) NOT NULL,
    descripcion VARCHAR2(4000)
);

-- Tabla EmpleadoCapacitacion
CREATE TABLE EmpleadoCapacitacion (
    id_empcap NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    employee_id NUMBER NOT NULL,
    capacitacion_id NUMBER NOT NULL,
    fecha_participacion DATE,
    CONSTRAINT fk_ec_emp FOREIGN KEY (employee_id) 
        REFERENCES EMPLOYEES(EMPLOYEE_ID),
    CONSTRAINT fk_ec_cap FOREIGN KEY (capacitacion_id) 
        REFERENCES Capacitacion(id_capacitacion)
);

-- ============================================================================
-- 2. INSERCIÓN DE DATOS
-- ============================================================================

-- Inserciones en Horario
INSERT INTO Horario (dia_semana, turno, hora_inicio, hora_termino) 
VALUES ('LUNES','Mañana',TO_TIMESTAMP('08:00','HH24:MI'),TO_TIMESTAMP('12:00','HH24:MI'));

INSERT INTO Horario (dia_semana, turno, hora_inicio, hora_termino) 
VALUES ('LUNES','Tarde',TO_TIMESTAMP('13:00','HH24:MI'),TO_TIMESTAMP('17:00','HH24:MI'));

INSERT INTO Horario (dia_semana, turno, hora_inicio, hora_termino) 
VALUES ('MARTES','Mañana',TO_TIMESTAMP('08:00','HH24:MI'),TO_TIMESTAMP('12:00','HH24:MI'));

INSERT INTO Horario (dia_semana, turno, hora_inicio, hora_termino) 
VALUES ('MARTES','Tarde',TO_TIMESTAMP('13:00','HH24:MI'),TO_TIMESTAMP('17:00','HH24:MI'));

INSERT INTO Horario (dia_semana, turno, hora_inicio, hora_termino) 
VALUES ('MIERCOLES','Mañana',TO_TIMESTAMP('08:00','HH24:MI'),TO_TIMESTAMP('12:00','HH24:MI'));

INSERT INTO Horario (dia_semana, turno, hora_inicio, hora_termino) 
VALUES ('MIERCOLES','Tarde',TO_TIMESTAMP('13:00','HH24:MI'),TO_TIMESTAMP('17:00','HH24:MI'));

INSERT INTO Horario (dia_semana, turno, hora_inicio, hora_termino) 
VALUES ('JUEVES','Mañana',TO_TIMESTAMP('08:00','HH24:MI'),TO_TIMESTAMP('12:00','HH24:MI'));

INSERT INTO Horario (dia_semana, turno, hora_inicio, hora_termino) 
VALUES ('JUEVES','Tarde',TO_TIMESTAMP('13:00','HH24:MI'),TO_TIMESTAMP('17:00','HH24:MI'));

INSERT INTO Horario (dia_semana, turno, hora_inicio, hora_termino) 
VALUES ('VIERNES','Mañana',TO_TIMESTAMP('08:00','HH24:MI'),TO_TIMESTAMP('12:00','HH24:MI'));

INSERT INTO Horario (dia_semana, turno, hora_inicio, hora_termino) 
VALUES ('VIERNES','Tarde',TO_TIMESTAMP('13:00','HH24:MI'),TO_TIMESTAMP('17:00','HH24:MI'));

-- Inserciones en Empleado_Horario
INSERT INTO Empleado_Horario (dia_semana, turno, employee_id) 
VALUES ('LUNES','Mañana',100);

INSERT INTO Empleado_Horario (dia_semana, turno, employee_id) 
VALUES ('MARTES','Mañana',100);

INSERT INTO Empleado_Horario (dia_semana, turno, employee_id) 
VALUES ('MIERCOLES','Mañana',101);

INSERT INTO Empleado_Horario (dia_semana, turno, employee_id) 
VALUES ('JUEVES','Tarde',102);

INSERT INTO Empleado_Horario (dia_semana, turno, employee_id) 
VALUES ('VIERNES','Mañana',103);

INSERT INTO Empleado_Horario (dia_semana, turno, employee_id) 
VALUES ('LUNES','Tarde',104);

INSERT INTO Empleado_Horario (dia_semana, turno, employee_id) 
VALUES ('MARTES','Tarde',105);

INSERT INTO Empleado_Horario (dia_semana, turno, employee_id) 
VALUES ('MIERCOLES','Tarde',106);

INSERT INTO Empleado_Horario (dia_semana, turno, employee_id) 
VALUES ('JUEVES','Mañana',107);

INSERT INTO Empleado_Horario (dia_semana, turno, employee_id) 
VALUES ('VIERNES','Tarde',108);

-- Inserciones en Asistencia_Empleado
INSERT INTO Asistencia_Empleado (employee_id, dia_semana, fecha_real, hora_inicio_real, hora_termino_real, inasistencia)
VALUES (100,'LUNES',TO_DATE('2025-09-01','YYYY-MM-DD'),TO_TIMESTAMP('2025-09-01 08:05','YYYY-MM-DD HH24:MI'),TO_TIMESTAMP('2025-09-01 16:55','YYYY-MM-DD HH24:MI'),'N');

INSERT INTO Asistencia_Empleado (employee_id, dia_semana, fecha_real, hora_inicio_real, hora_termino_real, inasistencia)
VALUES (100,'MARTES',TO_DATE('2025-09-02','YYYY-MM-DD'),TO_TIMESTAMP('2025-09-02 08:45','YYYY-MM-DD HH24:MI'),TO_TIMESTAMP('2025-09-02 17:05','YYYY-MM-DD HH24:MI'),'S');

INSERT INTO Asistencia_Empleado (employee_id, dia_semana, fecha_real, hora_inicio_real, hora_termino_real) 
VALUES (101,'MIERCOLES',TO_DATE('2025-09-03','YYYY-MM-DD'),TO_TIMESTAMP('2025-09-03 08:00','YYYY-MM-DD HH24:MI'),TO_TIMESTAMP('2025-09-03 16:30','YYYY-MM-DD HH24:MI'));

INSERT INTO Asistencia_Empleado (employee_id, dia_semana, fecha_real, hora_inicio_real, hora_termino_real) 
VALUES (102,'JUEVES',TO_DATE('2025-09-04','YYYY-MM-DD'),TO_TIMESTAMP('2025-09-04 13:00','YYYY-MM-DD HH24:MI'),TO_TIMESTAMP('2025-09-04 17:00','YYYY-MM-DD HH24:MI'));

INSERT INTO Asistencia_Empleado (employee_id, dia_semana, fecha_real, hora_inicio_real, hora_termino_real) 
VALUES (103,'VIERNES',TO_DATE('2025-09-05','YYYY-MM-DD'),TO_TIMESTAMP('2025-09-05 08:15','YYYY-MM-DD HH24:MI'),TO_TIMESTAMP('2025-09-05 12:00','YYYY-MM-DD HH24:MI'));

INSERT INTO Asistencia_Empleado (employee_id, dia_semana, fecha_real, hora_inicio_real, hora_termino_real) 
VALUES (104,'LUNES',TO_DATE('2025-09-08','YYYY-MM-DD'),TO_TIMESTAMP('2025-09-08 08:00','YYYY-MM-DD HH24:MI'),TO_TIMESTAMP('2025-09-08 16:00','YYYY-MM-DD HH24:MI'));

INSERT INTO Asistencia_Empleado (employee_id, dia_semana, fecha_real, hora_inicio_real, hora_termino_real) 
VALUES (105,'MARTES',TO_DATE('2025-09-09','YYYY-MM-DD'),TO_TIMESTAMP('2025-09-09 08:10','YYYY-MM-DD HH24:MI'),TO_TIMESTAMP('2025-09-09 16:00','YYYY-MM-DD HH24:MI'));

INSERT INTO Asistencia_Empleado (employee_id, dia_semana, fecha_real, hora_inicio_real, hora_termino_real) 
VALUES (106,'MIERCOLES',TO_DATE('2025-09-10','YYYY-MM-DD'),TO_TIMESTAMP('2025-09-10 08:00','YYYY-MM-DD HH24:MI'),TO_TIMESTAMP('2025-09-10 12:00','YYYY-MM-DD HH24:MI'));

INSERT INTO Asistencia_Empleado (employee_id, dia_semana, fecha_real, hora_inicio_real, hora_termino_real) 
VALUES (107,'JUEVES',TO_DATE('2025-09-11','YYYY-MM-DD'),TO_TIMESTAMP('2025-09-11 13:05','YYYY-MM-DD HH24:MI'),TO_TIMESTAMP('2025-09-11 17:10','YYYY-MM-DD HH24:MI'));

-- Inserciones en Capacitacion
INSERT INTO Capacitacion (nombre, horas, descripcion) 
VALUES ('SQL Avanzado',8,'Optimización y PL/SQL');

INSERT INTO Capacitacion (nombre, horas, descripcion) 
VALUES ('Seguridad Informática',12,'Conceptos básicos y prácticas');

INSERT INTO Capacitacion (nombre, horas, descripcion) 
VALUES ('Desarrollo Web',16,'HTML/CSS/JS moderno');

INSERT INTO Capacitacion (nombre, horas, descripcion) 
VALUES ('Gestión de Proyectos',10,'PM basics y SCRUM');

INSERT INTO Capacitacion (nombre, horas, descripcion) 
VALUES ('Calidad de Software',6,'Pruebas y CI/CD');

INSERT INTO Capacitacion (nombre, horas, descripcion) 
VALUES ('Comunicación efectiva',4,'Habilidades blandas');

INSERT INTO Capacitacion (nombre, horas, descripcion) 
VALUES ('Microservicios',12,'Arquitectura y patrones');

INSERT INTO Capacitacion (nombre, horas, descripcion) 
VALUES ('Docker y Kubernetes',14,'Contenedores y orquestación');

INSERT INTO Capacitacion (nombre, horas, descripcion) 
VALUES ('Testing Automatizado',8,'Selenium y frameworks');

INSERT INTO Capacitacion (nombre, horas, descripcion) 
VALUES ('Analítica de Datos',10,'SQL avanzado y visualización');

-- Inserciones en EmpleadoCapacitacion
INSERT INTO EmpleadoCapacitacion (employee_id, capacitacion_id, fecha_participacion) 
VALUES (100,1,TO_DATE('2024-06-10','YYYY-MM-DD'));

INSERT INTO EmpleadoCapacitacion (employee_id, capacitacion_id, fecha_participacion) 
VALUES (100,2,TO_DATE('2024-07-15','YYYY-MM-DD'));

INSERT INTO EmpleadoCapacitacion (employee_id, capacitacion_id, fecha_participacion) 
VALUES (101,3,TO_DATE('2024-05-20','YYYY-MM-DD'));

INSERT INTO EmpleadoCapacitacion (employee_id, capacitacion_id, fecha_participacion) 
VALUES (102,4,TO_DATE('2023-11-12','YYYY-MM-DD'));

INSERT INTO EmpleadoCapacitacion (employee_id, capacitacion_id, fecha_participacion) 
VALUES (103,5,TO_DATE('2023-04-05','YYYY-MM-DD'));

INSERT INTO EmpleadoCapacitacion (employee_id, capacitacion_id, fecha_participacion) 
VALUES (104,6,TO_DATE('2024-02-28','YYYY-MM-DD'));

INSERT INTO EmpleadoCapacitacion (employee_id, capacitacion_id, fecha_participacion) 
VALUES (105,7,TO_DATE('2024-03-18','YYYY-MM-DD'));

INSERT INTO EmpleadoCapacitacion (employee_id, capacitacion_id, fecha_participacion) 
VALUES (106,8,TO_DATE('2024-08-22','YYYY-MM-DD'));

INSERT INTO EmpleadoCapacitacion (employee_id, capacitacion_id, fecha_participacion) 
VALUES (107,9,TO_DATE('2024-09-30','YYYY-MM-DD'));

INSERT INTO EmpleadoCapacitacion (employee_id, capacitacion_id, fecha_participacion) 
VALUES (108,10,TO_DATE('2024-10-10','YYYY-MM-DD'));

-- ============================================================================
-- 3. CREACIÓN DE PAQUETE pkg_employee
-- ============================================================================

-- Especificación del paquete
CREATE OR REPLACE PACKAGE pkg_employee IS
    PROCEDURE top4_rotaciones(p_cursor OUT SYS_REFCURSOR);
    FUNCTION promedio_contrataciones_por_mes RETURN NUMBER;
    PROCEDURE gastos_por_region(p_cursor OUT SYS_REFCURSOR);
    FUNCTION tiempo_servicio_y_monto_total RETURN NUMBER;
    FUNCTION horas_trabajadas(p_emp_id NUMBER, p_mes NUMBER, p_anio NUMBER) RETURN NUMBER;
    FUNCTION horas_faltadas(p_emp_id NUMBER, p_mes NUMBER, p_anio NUMBER) RETURN NUMBER;
    PROCEDURE reporte_sueldos_por_mes(p_mes NUMBER, p_anio NUMBER, p_cursor OUT SYS_REFCURSOR);
END pkg_employee;
/

-- Cuerpo del paquete
CREATE OR REPLACE PACKAGE BODY pkg_employee IS

    -- 1.1 Procedimiento: Top 4 empleados con más rotaciones
    PROCEDURE top4_rotaciones(p_cursor OUT SYS_REFCURSOR) IS
    BEGIN
        OPEN p_cursor FOR
            SELECT e.employee_id,
                   e.last_name || ', ' || e.first_name AS empleado,
                   e.job_id AS puesto_actual,
                   COUNT(jh.job_id) AS cantidad_rotaciones
            FROM employees e
            LEFT JOIN job_history jh ON e.employee_id = jh.employee_id
            GROUP BY e.employee_id, e.last_name, e.first_name, e.job_id
            ORDER BY cantidad_rotaciones DESC
            FETCH FIRST 4 ROWS ONLY;
    END top4_rotaciones;

    -- 1.2 Función: Promedio de contrataciones por mes
    FUNCTION promedio_contrataciones_por_mes RETURN NUMBER IS
        v_total_meses NUMBER := 0;
        v_anios NUMBER;
        v_promedio NUMBER;
    BEGIN
        DBMS_OUTPUT.PUT_LINE(RPAD('MES',15) || 'PROMEDIO');
        
        SELECT COUNT(DISTINCT TO_CHAR(hire_date,'YYYY')) 
        INTO v_anios 
        FROM employees;
        
        FOR rec IN (
            SELECT TO_CHAR(hire_date,'Month','NLS_DATE_LANGUAGE=SPANISH') AS mes_nombre,
                   COUNT(*) AS contrataciones
            FROM employees
            GROUP BY TO_CHAR(hire_date,'Month','NLS_DATE_LANGUAGE=SPANISH')
            ORDER BY TO_CHAR(hire_date,'MM')
        ) LOOP
            v_promedio := ROUND(rec.contrataciones / v_anios, 2);
            DBMS_OUTPUT.PUT_LINE(RPAD(TRIM(rec.mes_nombre),15) || v_promedio);
            v_total_meses := v_total_meses + 1;
        END LOOP;
        
        RETURN v_total_meses;
    END promedio_contrataciones_por_mes;

    -- 1.3 Procedimiento: Gastos por región
    PROCEDURE gastos_por_region(p_cursor OUT SYS_REFCURSOR) IS
    BEGIN
        OPEN p_cursor FOR
            SELECT r.region_name,
                   SUM(e.salary) AS total_salarios,
                   COUNT(e.employee_id) AS cantidad_empleados,
                   MIN(e.hire_date) AS fecha_ingreso_mas_antiguo
            FROM employees e
            JOIN departments d ON e.department_id = d.department_id
            JOIN locations l ON d.location_id = l.location_id
            JOIN countries c ON l.country_id = c.country_id
            JOIN regions r ON c.region_id = r.region_id
            GROUP BY r.region_name;
    END gastos_por_region;

    -- 1.4 Función: Tiempo de servicio y monto total
    FUNCTION tiempo_servicio_y_monto_total RETURN NUMBER IS
        v_total NUMBER := 0;
        v_anios NUMBER;
        v_monto NUMBER;
    BEGIN
        FOR emp IN (SELECT employee_id, hire_date, salary FROM employees) LOOP
            v_anios := FLOOR(MONTHS_BETWEEN(SYSDATE, emp.hire_date) / 12);
            v_monto := (emp.salary / 12) * v_anios;
            v_total := v_total + NVL(v_monto, 0);
        END LOOP;
        
        RETURN v_total;
    END tiempo_servicio_y_monto_total;

    -- 1.5 Función: Horas trabajadas por empleado
    FUNCTION horas_trabajadas(p_emp_id NUMBER, p_mes NUMBER, p_anio NUMBER) RETURN NUMBER IS
        v_horas NUMBER := 0;
    BEGIN
        SELECT NVL(SUM((CAST(hora_termino_real AS DATE) - CAST(hora_inicio_real AS DATE)) * 24), 0)
        INTO v_horas
        FROM Asistencia_Empleado
        WHERE employee_id = p_emp_id
          AND EXTRACT(MONTH FROM fecha_real) = p_mes
          AND EXTRACT(YEAR FROM fecha_real) = p_anio;
        
        RETURN ROUND(v_horas, 2);
    END horas_trabajadas;

    -- 1.6 Función: Horas faltadas por empleado
    FUNCTION horas_faltadas(p_emp_id NUMBER, p_mes NUMBER, p_anio NUMBER) RETURN NUMBER IS
        v_programadas NUMBER := 0;
        v_trabajadas NUMBER := 0;
    BEGIN
        SELECT NVL(SUM((CAST(h.hora_termino AS DATE) - CAST(h.hora_inicio AS DATE)) * 24), 0)
        INTO v_programadas
        FROM Empleado_Horario eh
        JOIN Horario h ON UPPER(TRIM(h.dia_semana)) = UPPER(TRIM(eh.dia_semana))
        WHERE eh.employee_id = p_emp_id;
        
        v_trabajadas := horas_trabajadas(p_emp_id, p_mes, p_anio);
        
        RETURN ROUND(GREATEST(v_programadas - v_trabajadas, 0), 2);
    END horas_faltadas;

    -- 1.7 Procedimiento: Reporte de sueldos por mes
    PROCEDURE reporte_sueldos_por_mes(p_mes NUMBER, p_anio NUMBER, p_cursor OUT SYS_REFCURSOR) IS
        v_horas_mes NUMBER := 160;
    BEGIN
        OPEN p_cursor FOR
            SELECT e.employee_id,
                   e.first_name || ' ' || e.last_name AS empleado,
                   ROUND(e.salary * (pkg_employee.horas_trabajadas(e.employee_id, p_mes, p_anio) / v_horas_mes), 2) AS sueldo_calculado
            FROM employees e;
    END reporte_sueldos_por_mes;

END pkg_employee;
/

-- ============================================================================
-- 4. FUNCIONES Y PROCEDIMIENTOS INDEPENDIENTES
-- ============================================================================

-- 1.8 Función: Horas totales de capacitación por empleado
CREATE OR REPLACE FUNCTION horas_totales_capacitacion(p_emp_id NUMBER) RETURN NUMBER IS
    v_total NUMBER;
BEGIN
    SELECT NVL(SUM(c.horas), 0)
    INTO v_total
    FROM EmpleadoCapacitacion ec
    JOIN Capacitacion c ON ec.capacitacion_id = c.id_capacitacion
    WHERE ec.employee_id = p_emp_id;
    
    RETURN v_total;
END horas_totales_capacitacion;
/

-- 1.9 Procedimiento: Listado de capacitaciones
CREATE OR REPLACE PROCEDURE listado_capacitaciones(p_cursor OUT SYS_REFCURSOR) IS
BEGIN
    OPEN p_cursor FOR
        SELECT e.employee_id,
               e.first_name || ' ' || e.last_name AS empleado,
               COUNT(DISTINCT c.id_capacitacion) AS total_capacitaciones,
               SUM(c.horas) AS total_horas
        FROM employees e
        JOIN EmpleadoCapacitacion ec ON e.employee_id = ec.employee_id
        JOIN Capacitacion c ON ec.capacitacion_id = c.id_capacitacion
        GROUP BY e.employee_id, e.first_name, e.last_name
        ORDER BY total_horas DESC;
END listado_capacitaciones;
/

-- ============================================================================
-- 5. TRIGGERS
-- ============================================================================

-- 2. Trigger: Validación de asistencia
CREATE OR REPLACE TRIGGER trg_validar_asistencia
BEFORE INSERT OR UPDATE ON Asistencia_Empleado
FOR EACH ROW
DECLARE
    v_dia_semana VARCHAR2(15);
    v_count NUMBER;
BEGIN
    v_dia_semana := TRIM(UPPER(TO_CHAR(:NEW.fecha_real, 'DAY', 'NLS_DATE_LANGUAGE=SPANISH')));
    
    IF v_dia_semana != TRIM(UPPER(:NEW.dia_semana)) THEN
        RAISE_APPLICATION_ERROR(-20001, 'La fecha no corresponde al día de la semana indicado.');
    END IF;
    
    SELECT COUNT(*)
    INTO v_count
    FROM Horario h
    JOIN Empleado_Horario eh ON h.dia_semana = eh.dia_semana AND h.turno = eh.turno
    WHERE eh.employee_id = :NEW.employee_id
      AND :NEW.hora_inicio_real BETWEEN h.hora_inicio - INTERVAL '15' MINUTE AND h.hora_termino + INTERVAL '15' MINUTE
      AND :NEW.hora_termino_real BETWEEN h.hora_inicio AND h.hora_termino;
    
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Las horas no coinciden con el horario asignado.');
    END IF;
END;
/

-- 3. Trigger: Validación de salario dentro del rango del puesto
CREATE OR REPLACE TRIGGER trg_validar_salario
BEFORE INSERT OR UPDATE ON EMPLOYEES
FOR EACH ROW
DECLARE
    v_min NUMBER;
    v_max NUMBER;
BEGIN
    SELECT min_salary, max_salary 
    INTO v_min, v_max
    FROM jobs
    WHERE job_id = :NEW.job_id;
    
    IF :NEW.salary < v_min OR :NEW.salary > v_max THEN
        RAISE_APPLICATION_ERROR(-20010, 'El salario no está dentro del rango permitido para el puesto.');
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20011, 'El puesto asignado no existe en la tabla JOBS.');
END;
/

-- 4. Trigger: Marcar inasistencia si llega fuera del rango de 30 minutos
CREATE OR REPLACE TRIGGER trg_inasistencia_fuera_rango
BEFORE INSERT OR UPDATE ON Asistencia_Empleado
FOR EACH ROW
DECLARE
    v_hora_inicio TIMESTAMP;
    v_turno VARCHAR2(20);
    v_min_diff NUMBER;
BEGIN
    SELECT eh.turno 
    INTO v_turno
    FROM Empleado_Horario eh
    WHERE eh.employee_id = :NEW.employee_id
      AND UPPER(TRIM(eh.dia_semana)) = UPPER(TRIM(:NEW.dia_semana))
      AND ROWNUM = 1;
    
    SELECT h.hora_inicio 
    INTO v_hora_inicio
    FROM Horario h
    WHERE UPPER(TRIM(h.dia_semana)) = UPPER(TRIM(:NEW.dia_semana))
      AND h.turno = v_turno
      AND ROWNUM = 1;
    
    v_min_diff := (CAST(:NEW.hora_inicio_real AS DATE) - CAST(v_hora_inicio AS DATE)) * 24 * 60;
    
    IF ABS(v_min_diff) > 30 THEN
        :NEW.inasistencia := 'S';
    ELSE
        :NEW.inasistencia := 'N';
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        NULL;
END;
/

-- ============================================================================
-- FIN DEL SCRIPT
-- ============================================================================

COMMIT;
